// 20220929

// 리덕스란??
// 리액트에서 사용할수 있는 라이브러리

// 리액트는 자식 컴포넌트에서 props로 전달은 가능한데
// 다른 컴포넌트에서 직접 데이터 공유가 불가능하다..
// 그래서 공유해야할 데이터를 공유받는 컴포넌트들이 공통부모에서 state를 만들어서 자식 컴포넌트에게 전달해주는데
// 리액트는 데이터의 흐름이 단방향이기 떄문에 , 작업을 하다보면 부모 컴포넌트에 많은 props가 생기는 단점을 보완하기 위헤
// 리덕스는 state를 저장해두는 저장소 역할
// 각각의 컴포넌트가 어느 컴포넌트든 사용할수 있는 공통된 저장소를 사용할수 있다. (원하는 값을 저장하고 가져올수 있다)

// 근데 리덕스를 처음보는 사람들이 많이 개념을 어려워한다.

// 쉽게 생각해서 컴포넌트에서 값을 요청하고 전달받는걸 직접 할수있다.
// 근데 컴포넌트에서 저장소에 값을 직접적으로 수정할순 없다. >> 함수를 통해서 동작하는 방식으로 수정과 요청 가능

/////////////////////////////////////////////////////////////////////////////////////////////////////

// 리덕스 동작구조 (ex) '리덕스 플로우차트' 참고

// 리액트 훅 함수

// <값을 저장하는 구조>
// useDispatch
// 컴포넌트 => useDispatch => Action => Reducer => Store(저장소)
// 컴포넌트가 Action을 보내고 , Reducer로 전달받고 store의 값을 최신화 해준다.

// Action은 동작할 기능의 이름 행동
// Reducer는 함수인데 내가 사용할 동작들을 case(조건문)로 모아둔 곳
// 컴포넌트가 Action 행동을 무엇을 할지 Reducer로 보내고 store의 값을 바꿔준다
// store는 state 값을 저장할 객체라고 생각하면 된다
// state 값이 바뀌면 컴포넌트가 리렌더링 된다.

// <값을 가져오는 구조>
// useSelector
// store => useSelector => 컴포넌트
// useSelector는 store에 있는 값을 가져올떄 사용하는 함수

/////////////////////////////////////////////////////////////////////////////////////////

// 리덕스를 사용해보자

// npm install redux >> 리덕스 코어 설치

// 리덕스는 리액트 외에 다른 곳에서도 쓸수 있음

// 리액트에서 react-redux 라이브러리로 편하게 사용가능

// npm install react-redux

// Provider
// Provider 컴포넌트이고 이 컴포넌트로 감싸준 컴포넌트를 리덕스 저장소의 사용을 가능하게 만들어준다.
// 이 컴포넌트는 props로 store에서 전달 받는다.
